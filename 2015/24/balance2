#!/usr/bin/env swift -O

import Foundation

let inputTest = try! String(contentsOfFile: "input-test")
let input = try! String(contentsOfFile: "input")

// RULES:
// 1) three groups of exactly the same weight
// 2) The first group - the one going in the passenger compartment - needs
//    as few packages as possible
//    [the spec isn't clear here, but judging from the examples, the passenger
//    compartment needs to have *less* than any of the other two,
//    i.e. < instead of <=]
// 3) first group has the smallest quantum entanglement

struct PackageConfiguration: CustomStringConvertible {//, Hashable, Equatable {
	var passengerCompartment = PackageGroup()
	var containerLeft = PackageGroup()
	var containerRight = PackageGroup()
	var expectedWeight = 0
	var expectedPackages = 0
	var count: Int {
		passengerCompartment.count + containerLeft.count + containerRight.count
	}

	static func == (lhs: PackageConfiguration, rhs: PackageConfiguration) -> Bool {
		lhs.description == rhs.description
	}

	//func hash(into hasher: inout Hasher) {
	//	hasher.combine(self.description)
	//}

	var rule1: Bool {
		passengerCompartment.weight == containerLeft.weight &&
		passengerCompartment.weight == containerRight.weight
	}

	var rule2: Bool {
		passengerCompartment.count < containerLeft.count &&
		passengerCompartment.count < containerRight.count
	}

	var isValid: Bool {
		rule1 && rule2 && count == expectedPackages
	}

	var description: String {
		"Config: " + (isValid ? " (VALID, QE = \(passengerCompartment.quantumEntanglement))" : "") + "\n" +
		"    passengerCompartment=\(passengerCompartment) \(passengerCompartment.packages.map({$0.weight}).sorted())\n" +
		"    containerLeft=\(containerLeft) \(containerLeft.packages.map({$0.weight}).sorted())\n" +
		"    containerRight=\(containerRight) \(containerRight.packages.map({$0.weight}).sorted())\n"
	}
}

struct PackageGroup: CustomStringConvertible {
	var packages = [Package]()
	var weight: Int { packages.reduce(0, {$0 + $1.weight}) }
	var count: Int { packages.count }
	var quantumEntanglement: Int { packages.reduce(1, {$0 * $1.weight}) }
	var description: String { "weight \(weight), count \(count)" }
}

struct Package: CustomStringConvertible {
	let weight: Int
	var description: String { "Package(\(weight))" }
}

func allConfigurations(_ packagesLeftIn: [Package], configSoFar: PackageConfiguration? = nil) -> [PackageConfiguration] {
	// strategy:
	//
	// start with passengerCompartment, find all permutations where its
	// weight is exactly expectedWeight/3 and
	// number of packages is <= expectedPackages/3
	//
	// then find combinations where both containers have equal weight

	var config = configSoFar ?? PackageConfiguration()
	var thisConfig: PackageConfiguration
	var packagesLeft = packagesLeftIn
	var res = [PackageConfiguration]()

	//print("allConfigurations: \(packagesLeft), \(config)")

	if configSoFar == nil {
		config.expectedWeight = packagesLeft.reduce(0, {$0 + $1.weight})
		config.expectedPackages = packagesLeft.count
	}

	guard packagesLeft.count > 0 else {
		guard config.isValid else { return [] }
		fewestPackagesInCompartment = config.passengerCompartment.count
		lowestQE = min(lowestQE, config.passengerCompartment.quantumEntanglement)
		print(config)
		return [config]
	}

	guard config.passengerCompartment.count <= (config.expectedPackages/3)+1 else { return [] }
	guard config.passengerCompartment.count <= fewestPackagesInCompartment else { return [] }
	guard config.passengerCompartment.quantumEntanglement < lowestQE else { return [] }
	guard config.passengerCompartment.weight <= config.expectedWeight/3 else { return [] }
	guard config.containerLeft.weight <= config.expectedWeight/3 else { return [] }
	guard config.containerRight.weight <= config.expectedWeight/3 else { return [] }

	main: for i in (0..<packagesLeft.count).reversed() {
		var nextPackage = packagesLeft[i]
		var thisPackagesLeft = packagesLeft
		thisPackagesLeft.remove(at: i)

		guard config.passengerCompartment.weight == config.expectedWeight/3 else {
			thisConfig = config
			thisConfig.passengerCompartment.packages += [nextPackage]
			res += allConfigurations(thisPackagesLeft, configSoFar: thisConfig)
			continue
		}

		// at this place, when allConfigurations returns, they may or may not be
		// matches for our current passengerCompartment. *if* there are any,
		// we don't need to dig any further, because the passengerCompartment
		// and therefore the QE of further matches won't change anymore.
		guard res.isEmpty else { break}

		guard config.containerLeft.weight == config.expectedWeight/3 else {
			thisConfig = config
			thisConfig.containerLeft.packages += [nextPackage]
			res += allConfigurations(thisPackagesLeft, configSoFar: thisConfig)
			continue
		}

		// also, if containerLeft already has as many elements as the passengerCompartment,
		// it's pointless to continue, as we already violate rule 2.
		guard config.containerLeft.count > config.passengerCompartment.count else { break }

		// if compartment and left are full and properly weighted, then
		// right must have the proper weight as well -> finish this.
		thisConfig = config
		thisConfig.containerRight.packages += packagesLeft
		res += allConfigurations([], configSoFar: thisConfig)
		break
	}

	return res
}

var fewestPackagesInCompartment: Int
var lowestQE: Int

let qeSort: (PackageConfiguration, PackageConfiguration) -> Bool = {
	$0.passengerCompartment.quantumEntanglement <= $1.passengerCompartment.quantumEntanglement
}

// ----- TEST -----

fewestPackagesInCompartment = Int.max
lowestQE = Int.max

var allPackagesTest = [Package]()
for line in inputTest.split(separator: "\n").map({String($0)}) {
	allPackagesTest += [Package(weight: Int(line)!)]
}

let validConfigsTest = allConfigurations(allPackagesTest)
print("found \(validConfigsTest.count) valid TEST configs")
//validConfigs.forEach { print($0) }
let someOptimalConfigTest = validConfigsTest.sorted(by: qeSort)[0]
guard someOptimalConfigTest.passengerCompartment.quantumEntanglement == 99 else {
	fatalError("test failed: QE != 99; \(someOptimalConfigTest)")
}

// ----- REAL -----

fewestPackagesInCompartment = Int.max
lowestQE = Int.max

var allPackages = [Package]()
for line in input.split(separator: "\n").map({String($0)}) {
	allPackages += [Package(weight: Int(line)!)]
}

let validConfigs = allConfigurations(allPackages)
print("found \(validConfigs.count) valid configs")
//validConfigs.forEach { print($0) }
let someOptimalConfig = validConfigs.sorted(by: qeSort)[0]
print(someOptimalConfig)

