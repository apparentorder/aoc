#!/usr/bin/env swift -O

import Foundation

class Spell: CustomStringConvertible, Equatable {
	let name: String
	let cost: Int
	var description: String { name }

	static func == (lhs: Spell, rhs: Spell) -> Bool {
		lhs.name == rhs.name
	}

	init(name: String, cost: Int) {
		self.name = name
		self.cost = cost
	}
}

class SpellInstant: Spell {
	let damage: Int
	let healing: Int

	init(name: String, cost: Int, damage: Int, healing: Int) {
		self.damage = damage
		self.healing = healing
		super.init(name: name, cost: cost)
	}
}

class SpellEffect: Spell {
	var duration: Int
	let armorIncrease: Int
	let damagePerTurn: Int
	let manaPerTurn: Int
	let isHostile: Bool

	func copy() -> SpellEffect {
		return SpellEffect(
			name: name,
			cost: cost,
			duration: duration,
			armorIncrease: armorIncrease,
			damagePerTurn: damagePerTurn,
			manaPerTurn: manaPerTurn,
			isHostile: isHostile
		)
	}

	init(
		name: String,
		cost: Int,
		duration: Int,
		armorIncrease: Int,
		damagePerTurn: Int,
		manaPerTurn: Int,
		isHostile: Bool
	) {
		self.duration = duration
		self.armorIncrease = armorIncrease
		self.damagePerTurn = damagePerTurn
		self.manaPerTurn = manaPerTurn
		self.isHostile = isHostile
		super.init(name: name, cost: cost)
	}
}

class Character: CustomStringConvertible, Equatable {
	let name: String
	var hitPoints: Int
	var mana: Int
	var manaSpent: Int = 0
	let damage: Int
	var armor: Int
	var sufferDamagePerTurn = 0
	var gainManaPerTurn = 0
	var activeEffects = [SpellEffect]()
	var isDead: Bool { hitPoints <= 0 || mana < 0 } // mana can be 0 for one more turn
	var description: String {
		"\(name) " + (isDead ? "*DEAD* " : "") +
		"(HP=\(hitPoints) Mana=\(mana) Armor=\(armor))"
	}

	func copy() -> Character {
		let c = Character(
			name: name,
			hitPoints: hitPoints,
			mana: mana,
			damage: damage,
			armor: armor
		)

		c.activeEffects = self.activeEffects.map { $0.copy() }
		c.sufferDamagePerTurn = self.sufferDamagePerTurn
		c.gainManaPerTurn = self.gainManaPerTurn
		c.manaSpent = self.manaSpent

		return c
	}

	func takeHit(_ points: Int, totalArmor: Int? = nil) {
		var hit = points - (totalArmor ?? self.armor)
		hit = (hit < 1) ? 1 : hit
		//print("takeHit: \(points) after armor \(hit) armor=\(self.armor)")
		self.hitPoints -= hit
	}

	func adjustStats(forEffect e: SpellEffect, removing: Bool) {
		let x = removing ? -1 : 1
		self.armor += e.armorIncrease * x
		self.sufferDamagePerTurn += e.damagePerTurn * x
		self.gainManaPerTurn += e.manaPerTurn * x
	}

	func removeEffect(_ e: SpellEffect) {
		self.adjustStats(forEffect: e, removing: true)
		self.activeEffects.removeAll { $0 == e }
	}

	func applyEffect(_ e: SpellEffect) -> Bool {
		guard !self.activeEffects.contains(e) else {
			return false
		}

		self.adjustStats(forEffect: e, removing: false)
		self.activeEffects += [e]

		return true
	}

	static func == (lhs: Character, rhs: Character) -> Bool {
		lhs.name == rhs.name
	}

	init(name: String, hitPoints: Int, mana: Int, damage: Int, armor: Int) {
		self.name = name
		self.hitPoints = hitPoints
		self.mana = mana
		self.damage = damage
		self.armor = armor
	}
}

var allSpells: [Spell] = [
	SpellInstant(
		name: "Magic Missile",
		cost: 53,
		damage: 4,
		healing: 0
	),
	SpellInstant(
		name: "Drain",
		cost: 73,
		damage: 2,
		healing: 2
	),
	SpellEffect(
		name: "Shield",
		cost: 113,
		duration: 6,
		armorIncrease: 7,
		damagePerTurn: 0,
		manaPerTurn: 0,
		isHostile: false
	),
	SpellEffect(
		name: "Poison",
		cost: 173,
		duration: 6,
		armorIncrease: 0,
		damagePerTurn: 3,
		manaPerTurn: 0,
		isHostile: true
	),
	SpellEffect(
		name: "Recharge",
		cost: 229,
		duration: 5,
		armorIncrease: 0,
		damagePerTurn: 0,
		manaPerTurn: 101,
		isHostile: false
	),
]

func d(_ s: String) {
	if debug { print(s) }
}

func stillFightingAfterAttack(
	from attacker: Character,
	against defender: Character,
	depth: Int = 0,
	withSpell: Spell? = nil,
	isHardMode: Bool = false
) -> Bool {
	// return true if the fight can continue

	let indent = String(repeating: " ", count: depth*3)
	d(indent + "| ")
	d(indent + "| " + attacker.description)
	d(indent + "| " + defender.description)

	if isHardMode {
		attacker.hitPoints -= 1
		d(indent + "\(attacker.name) suffers 1 Hard Mode damage.")
		guard !attacker.isDead else {
			d(indent + "\(attacker.name) dies (Hard Mode damage tick).")
			return false
		}
	}

	for char in [attacker, defender] {
		if char.gainManaPerTurn > 0 {
			d(indent + "\(char.name) gains \(char.gainManaPerTurn) mana")
			char.mana += char.gainManaPerTurn
		}

		if char.sufferDamagePerTurn > 0 {
			d(indent + "\(char.name) suffers \(char.sufferDamagePerTurn) periodic damage")
			char.takeHit(char.sufferDamagePerTurn)
			guard !char.isDead else {
				d(indent + "\(char.name) dies (periodic damage).")
				return false
			}
		}

		char.activeEffects.forEach { $0.duration -= 1 }
		char.activeEffects.filter { $0.duration <= 0 }.forEach { char.removeEffect($0)}
	}

	guard let spell = withSpell else {
		// physical attack
		d(indent + "\(attacker.name) attacks for \(attacker.damage)")
		defender.takeHit(attacker.damage)
		guard !defender.isDead else {
			d(indent + "\(defender.name) dies (physical attack)")
			return false
		}
		return true
	}

	attacker.mana -= spell.cost
	attacker.manaSpent += spell.cost
	guard attacker.manaSpent <= lowestManaSpentSoFar else {
		d(indent + "\(attacker.name) maximum mana exceeded (\(attacker.manaSpent) > \(lowestManaSpentSoFar))")
		return false
	}
	guard attacker.mana >= 0 else {
		d(indent + "\(attacker.name) out of mana (for \(spell))" )
		return false
	}

	switch spell {
	case let instant as SpellInstant:
		d(indent + "\(attacker.name) casts instant \(instant), " +
		"damage=\(instant.damage) healing=\(instant.healing)")

		defender.takeHit(instant.damage)
		attacker.hitPoints += instant.healing

		guard !defender.isDead else {
			d(indent + "\(defender.name) dies (spell hit).")
			return false
		}
	case let effect as SpellEffect:
		d(indent + "\(attacker.name) casts effect \(effect)")
		if effect.isHostile {
			guard defender.applyEffect(effect.copy()) else { return false }
		} else {
			guard attacker.applyEffect(effect.copy()) else { return false }
		}
	default: fatalError("unknown spell \(spell)")
	}

	return true
}

func spell(_ name: String) -> Spell {
	return (allSpells.filter { $0.name == name })[0]
}

func fight(player playerIn: Character, boss bossIn: Character, testWithSpells spellsIn: [Spell]) {
	let player = playerIn.copy()
	let boss = bossIn.copy()
	var spells = spellsIn

	while spells.count > 0, case let spell = spells.removeFirst() {
		_ = stillFightingAfterAttack(from: player, against: boss, withSpell: spell)
		print()
		guard !boss.isDead && !player.isDead else {
			print("END:")
			print("\(player)")
			print("\(boss)")
			return
		}

		_ = stillFightingAfterAttack(from: boss, against: player)
		print()
		guard !boss.isDead && !player.isDead else {
			print("END:")
			print("\(player)")
			print("\(boss)")
			return
		}
	}
}

func fight(player playerIn: Character, boss bossIn: Character, depth: Int = 0, spellHistory: [Spell] = []) {
	for spell in allSpells {
		let player = playerIn.copy()
		let boss = bossIn.copy()

		guard stillFightingAfterAttack(from: player, against: boss, depth: depth, withSpell: spell, isHardMode: isPart2) else {
			if boss.isDead {
				print("VICTORY! \(boss) died after \(player.manaSpent) for \(spellHistory)")
				lowestManaSpentSoFar = min(lowestManaSpentSoFar, player.manaSpent)
			}
			continue
		}

		guard stillFightingAfterAttack(from: boss, against: player, depth: depth) else {
			if boss.isDead {
				print("VICTORY! \(boss) died after \(player.manaSpent) for \(spellHistory)")
				lowestManaSpentSoFar = min(lowestManaSpentSoFar, player.manaSpent)
			}
			continue
		}

		fight(
			player: player, 
			boss: boss, 
			depth: depth + 1, 
			spellHistory: spellHistory + [spell]
		)
	}
}

let debug = false
let isPart2 = true

let player = Character(name: "Player", hitPoints: 50, mana: 500, damage: 0, armor: 0)
let boss = Character(name: "Boss", hitPoints: 55, mana: 0, damage: 8, armor: 0)

let testPlayer = Character(name: "TestPlayer", hitPoints: 10, mana: 250, damage: 0, armor: 0)
let testBoss1 = Character(name: "TestBoss", hitPoints: 13, mana: 0, damage: 8, armor: 0)
let testBoss2 = Character(name: "TestBoss", hitPoints: 14, mana: 0, damage: 8, armor: 0)

var lowestManaSpentSoFar = Int.max

print("-----------------")

fight(player: testPlayer, boss: testBoss1, testWithSpells: [
	spell("Poison"),
	spell("Magic Missile")
])

print("-----------------")

fight(player: testPlayer, boss: testBoss2, testWithSpells: [
	spell("Recharge"),
	spell("Shield"),
	spell("Drain"),
	spell("Poison"),
	spell("Magic Missile"),
])

print("-----------------")
print("-----------------")
print("-----------------")

fight(player: player, boss: boss)
print(lowestManaSpentSoFar)

