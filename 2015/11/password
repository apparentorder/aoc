#!/usr/bin/env swift

import Foundation

struct Password: CustomStringConvertible {
	var password: String
	var description: String { password }

	static func meetsAllRequirements(_ s: String) -> Bool {
		guard meetsBasicRequirements(s) else { return false }
		guard meetsAdvancedRequirements(s) else { return false }
		return true
	}

	static func meetsBasicRequirements(_ s: String) -> Bool {
		guard s.count == 8 else { return false }
		guard hasOnlyValidChars(s) else { return false }
		guard hasNoInvalidCharacters(s) else { return false }
		return true
	}

	static func meetsAdvancedRequirements(_ s: String) -> Bool {
		guard hasIncreasingLetters(s) else { return false }
		guard hasTwoPairs(s) else { return false }
		return true
	}

	static func hasOnlyValidChars(_ s: String) -> Bool {
		for c in s {
			guard "a"..."z" ~= c else { return false }
		}
		return true
	}

	static func hasIncreasingLetters(_ inString: String) -> Bool {
		let s = Array(inString).map { String($0) }
		guard s.count >= 3 else { return false }

		for i in 0 ..< (s.count - 2) {
			guard "a"..."x" ~= s[i] else { continue }
			let c = UnicodeScalar(s[i])!.value
			let c1 = UnicodeScalar(s[i + 1])!.value
			let c2 = UnicodeScalar(s[i + 2])!.value

			if c+1 == c1 && c+2 == c2 {
				return true
			}
		}

		return false
	}

	static func hasNoInvalidCharacters(_ s: String) -> Bool {
		let forbidden = ["i", "o", "l"]

		for l in forbidden {
			guard !s.contains(l) else { return false }
		}

		return true
	}

	static func hasTwoPairs(_ inString: String) -> Bool {
		let s = Array(inString).map { String($0) }
		var pairs = [String:Bool]()

		for i in 0 ..< (s.count - 1) {
			if s[i] == s[i+1] {
				pairs[s[i]] = true
			}
		}

		guard pairs.count >= 2 else { return false }
		return true
	}

	static func next(_ inString: String) -> String {
		var s = Array(inString).map { String($0) }
		var wrappedAt: Int? = 7

		repeat {
			let x = wrappedAt!
			guard x >= 0 else { fatalError("next: increment impossible") }

			if s[x] == "z" {
				s[x] = "a"
				wrappedAt = x - 1
			} else {
				s[x] = String(UnicodeScalar(UnicodeScalar(s[x])!.value + 1)!)
				wrappedAt = nil
			}
		} while wrappedAt != nil

		return s.joined(separator: "")
	}

	init?(_ s: String) {
		guard Password.meetsBasicRequirements(s) else {
			fatalError("password \(s) doesn't meet basic requirements")
		}

		self.password = s
	}

	init(nextAfter inString: String) {
		var s = inString
		var attempts = 0

		guard Password.meetsBasicRequirements(s) else {
			fatalError("password \(s) doesn't meet basic requirements")
		}

		repeat {
			s = Password.next(s)
			attempts += 1
			//print("trying \(s)")
		} while !Password.meetsAdvancedRequirements(s)

		print("found after \(attempts) attempts")
		self.password = s
	}
}

print(Password("vzbxkghb")!)
let p1 = Password(nextAfter: "vzbxkghb")
print(p1)
let p2 = Password(nextAfter: p1.description)
print(p2)

